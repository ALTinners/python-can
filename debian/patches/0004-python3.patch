From: =?utf-8?q?=22IOhannes_m_zm=C3=B6lnig_=28Debian/GNU=29=22?=
 <umlaeute@debian.org>
Date: Fri, 27 Mar 2020 20:57:21 +0100
Subject: use 'python3' instead of 'python' when calling scripts

Origin: Debian
Forwarded: not-needed
Last-Update: 2019-09-10

also in the documentation
Last-Update: 2019-09-10
---
 can/logger.py        |  2 +-
 can/player.py        |  2 +-
 can/viewer.py        | 12 ++++++------
 doc/scripts.rst      |  8 ++++----
 test/test_scripts.py |  4 ++--
 5 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/can/logger.py b/can/logger.py
index 204eb8d..3ac9ef9 100644
--- a/can/logger.py
+++ b/can/logger.py
@@ -29,7 +29,7 @@ from can import Bus, BusState, Logger
 
 def main():
     parser = argparse.ArgumentParser(
-        "python -m can.logger",
+        "python3 -m can.logger",
         description="Log CAN traffic, printing messages to stdout or to a given file.")
 
     parser.add_argument("-f", "--file_name", dest="log_file",
diff --git a/can/player.py b/can/player.py
index c712f17..61e5d03 100644
--- a/can/player.py
+++ b/can/player.py
@@ -19,7 +19,7 @@ from can import Bus, LogReader, MessageSync
 
 def main():
     parser = argparse.ArgumentParser(
-        "python -m can.player",
+        "python3 -m can.player",
         description="Replay CAN traffic.")
 
     parser.add_argument("-f", "--file_name", dest="log_file",
diff --git a/can/viewer.py b/can/viewer.py
index 316d3e3..16de2a6 100644
--- a/can/viewer.py
+++ b/can/viewer.py
@@ -326,7 +326,7 @@ def parse_args(args):
         kwargs = {'allow_abbrev': False}
 
     # Parse command line arguments
-    parser = argparse.ArgumentParser('python -m can.viewer',
+    parser = argparse.ArgumentParser('python3 -m can.viewer',
                                      description='A simple CAN viewer terminal application written in Python',
                                      epilog='R|Shortcuts: '
                                             '\n        +---------+-------------------------+'
@@ -370,7 +370,7 @@ def parse_args(args):
                                '\n      q = int64_t, Q = uint64_t'
                                '\n      f = float (32-bits), d = double (64-bits)'
                                '\nFx to convert six bytes with ID 0x100 into uint8_t, uint16 and uint32_t:'
-                               '\n  $ python -m can.viewer -d "100:<BHL"'
+                               '\n  $ python3 -m can.viewer -d "100:<BHL"'
                                '\nNote that the IDs are always interpreted as hex values.'
                                '\nAn optional conversion from integers to real units can be given'
                                '\nas additional arguments. In order to convert from raw integer'
@@ -379,16 +379,16 @@ def parse_args(args):
                                '\nto convert from real units to raw integer values.'
                                '\nFx lets say the uint8_t needs no conversion, but the uint16 and the uint32_t'
                                '\nneeds to be divided by 10 and 100 respectively:'
-                               '\n  $ python -m can.viewer -d "101:<BHL:1:10.0:100.0"'
+                               '\n  $ python3 -m can.viewer -d "101:<BHL:1:10.0:100.0"'
                                '\nBe aware that integer division is performed if the scaling value is an integer.'
                                '\nMultiple arguments are separated by spaces:'
-                               '\n  $ python -m can.viewer -d "100:<BHL" "101:<BHL:1:10.0:100.0"'
+                               '\n  $ python3 -m can.viewer -d "100:<BHL" "101:<BHL:1:10.0:100.0"'
                                '\nAlternatively a file containing the conversion strings separated by new lines'
                                '\ncan be given as input:'
                                 '\n  $ cat file.txt'
                                 '\n      100:<BHL'
                                 '\n      101:<BHL:1:10.0:100.0'
-                                '\n  $ python -m can.viewer -d file.txt',
+                                '\n  $ python3 -m can.viewer -d file.txt',
                           metavar='{<id>:<format>,<id>:<format>:<scaling1>:...:<scalingN>,file.txt}',
                           nargs=argparse.ONE_OR_MORE, default='')
 
@@ -396,7 +396,7 @@ def parse_args(args):
                           '\n      <can_id>:<can_mask> (matches when <received_can_id> & mask == can_id & mask)'
                           '\n      <can_id>~<can_mask> (matches when <received_can_id> & mask != can_id & mask)'
                           '\nFx to show only frames with ID 0x100 to 0x103 and 0x200 to 0x20F:'
-                          '\n      python -m can.viewer -f 100:7FC 200:7F0'
+                          '\n      python3 -m can.viewer -f 100:7FC 200:7F0'
                           '\nNote that the ID and mask are alway interpreted as hex values',
                           metavar='{<can_id>:<can_mask>,<can_id>~<can_mask>}', nargs=argparse.ONE_OR_MORE, default='')
 
diff --git a/doc/scripts.rst b/doc/scripts.rst
index a63f1b1..d61efc2 100644
--- a/doc/scripts.rst
+++ b/doc/scripts.rst
@@ -3,7 +3,7 @@ Scripts
 
 The following modules are callable from python-can.
 
-They can be called for example by ``python -m can.logger`` or ``can_logger.py`` (if installed using pip).
+They can be called for example by ``python3 -m can.logger`` or ``can_logger.py`` (if installed using pip).
 
 can.logger
 ----------
@@ -11,13 +11,13 @@ can.logger
 Command line help, called with ``--help``:
 
 
-.. command-output:: python -m can.logger -h
+.. command-output:: python3 -m can.logger -h
 
 
 can.player
 ----------
 
-.. command-output:: python -m can.player -h
+.. command-output:: python3 -m can.player -h
 
 
 can.viewer
@@ -37,5 +37,5 @@ By default the ``can.viewer`` uses the :doc:`/interfaces/socketcan` interface. A
 
 The full usage page can be seen below:
 
-.. command-output:: python -m can.viewer -h
+.. command-output:: python3 -m can.viewer -h
 
diff --git a/test/test_scripts.py b/test/test_scripts.py
index 260a69f..c4a4f5a 100644
--- a/test/test_scripts.py
+++ b/test/test_scripts.py
@@ -72,7 +72,7 @@ class TestLoggerScript(CanScriptTest):
 
     def _commands(self):
         commands = [
-            "python -m can.logger --help",
+            "python3 -m can.logger --help",
         ]
         return commands
 
@@ -85,7 +85,7 @@ class TestPlayerScript(CanScriptTest):
 
     def _commands(self):
         commands = [
-            "python -m can.player --help",
+            "python3 -m can.player --help",
         ]
         return commands
 
