Description: use 'python3' instead of 'python' when calling scripts
 also in the documentation
Author: IOhannes m zm√∂lnig
Origin: Debian
Forwarded: not-needed
Last-Update: 2019-09-10
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- python-can.orig/can/logger.py
+++ python-can/can/logger.py
@@ -27,7 +27,7 @@
 
 def main():
     parser = argparse.ArgumentParser(
-        "python -m can.logger",
+        "python3 -m can.logger",
         description="Log CAN traffic, printing messages to stdout or to a given file.",
     )
 
--- python-can.orig/can/player.py
+++ python-can/can/player.py
@@ -17,7 +17,7 @@
 
 def main():
     parser = argparse.ArgumentParser(
-        "python -m can.player", description="Replay CAN traffic."
+        "python3 -m can.player", description="Replay CAN traffic."
     )
 
     parser.add_argument(
--- python-can.orig/can/viewer.py
+++ python-can/can/viewer.py
@@ -341,7 +341,7 @@
 
     # Parse command line arguments
     parser = argparse.ArgumentParser(
-        "python -m can.viewer",
+        "python3 -m can.viewer",
         description="A simple CAN viewer terminal application written in Python",
         epilog="R|Shortcuts: "
         "\n        +---------+-------------------------+"
@@ -414,7 +414,7 @@
         "\n      q = int64_t, Q = uint64_t"
         "\n      f = float (32-bits), d = double (64-bits)"
         "\nFx to convert six bytes with ID 0x100 into uint8_t, uint16 and uint32_t:"
-        '\n  $ python -m can.viewer -d "100:<BHL"'
+        '\n  $ python3 -m can.viewer -d "100:<BHL"'
         "\nNote that the IDs are always interpreted as hex values."
         "\nAn optional conversion from integers to real units can be given"
         "\nas additional arguments. In order to convert from raw integer"
@@ -423,16 +423,16 @@
         "\nto convert from real units to raw integer values."
         "\nFx lets say the uint8_t needs no conversion, but the uint16 and the uint32_t"
         "\nneeds to be divided by 10 and 100 respectively:"
-        '\n  $ python -m can.viewer -d "101:<BHL:1:10.0:100.0"'
+        '\n  $ python3 -m can.viewer -d "101:<BHL:1:10.0:100.0"'
         "\nBe aware that integer division is performed if the scaling value is an integer."
         "\nMultiple arguments are separated by spaces:"
-        '\n  $ python -m can.viewer -d "100:<BHL" "101:<BHL:1:10.0:100.0"'
+        '\n  $ python3 -m can.viewer -d "100:<BHL" "101:<BHL:1:10.0:100.0"'
         "\nAlternatively a file containing the conversion strings separated by new lines"
         "\ncan be given as input:"
         "\n  $ cat file.txt"
         "\n      100:<BHL"
         "\n      101:<BHL:1:10.0:100.0"
-        "\n  $ python -m can.viewer -d file.txt",
+        "\n  $ python3 -m can.viewer -d file.txt",
         metavar="{<id>:<format>,<id>:<format>:<scaling1>:...:<scalingN>,file.txt}",
         nargs=argparse.ONE_OR_MORE,
         default="",
@@ -445,7 +445,7 @@
         "\n      <can_id>:<can_mask> (matches when <received_can_id> & mask == can_id & mask)"
         "\n      <can_id>~<can_mask> (matches when <received_can_id> & mask != can_id & mask)"
         "\nFx to show only frames with ID 0x100 to 0x103 and 0x200 to 0x20F:"
-        "\n      python -m can.viewer -f 100:7FC 200:7F0"
+        "\n      python3 -m can.viewer -f 100:7FC 200:7F0"
         "\nNote that the ID and mask are alway interpreted as hex values",
         metavar="{<can_id>:<can_mask>,<can_id>~<can_mask>}",
         nargs=argparse.ONE_OR_MORE,
--- python-can.orig/test/test_scripts.py
+++ python-can/test/test_scripts.py
@@ -70,8 +70,8 @@
 class TestLoggerScript(CanScriptTest):
     def _commands(self):
         commands = [
-            "python -m can.logger --help",
-#            "python scripts/can_logger.py --help",
+            "python3 -m can.logger --help",
+#            "python3 scripts/can_logger.py --help",
         ]
 #        if IS_UNIX:
 #            commands += ["can_logger.py --help"]
@@ -86,8 +86,8 @@
 class TestPlayerScript(CanScriptTest):
     def _commands(self):
         commands = [
-            "python -m can.player --help",
-#            "python scripts/can_player.py --help",
+            "python3 -m can.player --help",
+#            "python3 scripts/can_player.py --help",
         ]
 #        if IS_UNIX:
 #            commands += ["can_player.py --help"]
