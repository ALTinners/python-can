.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.8.
.TH CAN_PLAYER "1" "February 2019" "can_player 3.0.0+github" "User Commands"
.SH NAME
can_player \- manual page for can_player 3.0.0+github
.SH DESCRIPTION
usage: python \fB\-m\fR can.player [\-h] [\-f LOG_FILE] [\-v] [\-c CHANNEL]
.TP
[\-i {pcan,ixxat,socketcan_ctypes,kvaser,virtual,usb2can,vector,slcan,nican,socketcan,iscan,neovi,serial,socketcan_native}]
[\-b BITRATE] [\-\-ignore\-timestamps] [\-g GAP]
[\-s SKIP]
input\-file
.PP
Replay CAN traffic.
.SS "positional arguments:"
.TP
input\-file
The file to replay. For supported types see
can.LogReader.
.SS "optional arguments:"
.TP
\fB\-h\fR, \fB\-\-help\fR
show this help message and exit
.TP
\fB\-f\fR LOG_FILE, \fB\-\-file_name\fR LOG_FILE
Path and base log filename, for supported types see
can.LogReader.
.TP
\fB\-v\fR
Also print can frames to stdout. You can add several
of these to enable debugging
.TP
\fB\-c\fR CHANNEL, \fB\-\-channel\fR CHANNEL
Most backend interfaces require some sort of channel.
For example with the serial interface the channel
might be a rfcomm device: "/dev/rfcomm0" With the
socketcan interfaces valid channel examples include:
"can0", "vcan0"
.TP
\fB\-i\fR {pcan,ixxat,socketcan_ctypes,kvaser,virtual,usb2can,vector,slcan,nican,socketcan,iscan,neovi,serial,socketcan_native}, \fB\-\-interface\fR {pcan,ixxat,socketcan_ctypes,kvaser,virtual,usb2can,vector,slcan,nican,socketcan,iscan,neovi,serial,socketcan_native}
Specify the backend CAN interface to use. If left
blank, fall back to reading from configuration files.
.TP
\fB\-b\fR BITRATE, \fB\-\-bitrate\fR BITRATE
Bitrate to use for the CAN bus.
.TP
\fB\-\-ignore\-timestamps\fR
Ignore timestamps (send all frames immediately with
minimum gap between frames)
.TP
\fB\-g\fR GAP, \fB\-\-gap\fR GAP
<s> minimum time between replayed frames
.TP
\fB\-s\fR SKIP, \fB\-\-skip\fR SKIP
<s> skip gaps greater than 's' seconds
