.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.8.
.TH CAN_LOGGER "1" "February 2019" "can_logger 3.0.0+github" "User Commands"
.SH NAME
can_logger \- CAN data logger 3.0.0+github
.SH DESCRIPTION
usage: python \fB\-m\fR can.logger [\-h] [\-f LOG_FILE] [\-v] [\-c CHANNEL]
.TP
[\-i {pcan,ixxat,socketcan_ctypes,kvaser,virtual,usb2can,vector,slcan,nican,socketcan,iscan,neovi,serial,socketcan_native}]
[\-\-filter ...] [\-b BITRATE] [\-\-active | \fB\-\-passive]\fR
.PP
Log CAN traffic, printing messages to stdout or to a given file.
.SS "optional arguments:"
.TP
\fB\-h\fR, \fB\-\-help\fR
show this help message and exit
.TP
\fB\-f\fR LOG_FILE, \fB\-\-file_name\fR LOG_FILE
Path and base log filename, for supported types see
can.Logger.
.TP
\fB\-v\fR
How much information do you want to see at the command
line? You can add several of these e.g., \fB\-vv\fR is DEBUG
.TP
\fB\-c\fR CHANNEL, \fB\-\-channel\fR CHANNEL
Most backend interfaces require some sort of channel.
For example with the serial interface the channel
might be a rfcomm device: "/dev/rfcomm0" With the
socketcan interfaces valid channel examples include:
"can0", "vcan0"
.TP
\fB\-i\fR {pcan,ixxat,socketcan_ctypes,kvaser,virtual,usb2can,vector,slcan,nican,socketcan,iscan,neovi,serial,socketcan_native}, \fB\-\-interface\fR {pcan,ixxat,socketcan_ctypes,kvaser,virtual,usb2can,vector,slcan,nican,socketcan,iscan,neovi,serial,socketcan_native}
Specify the backend CAN interface to use. If left
blank, fall back to reading from configuration files.
.TP
\fB\-\-filter\fR ...
Comma separated filters can be specified for the given
CAN interface: <can_id>:<can_mask> (matches when
<received_can_id> & mask == can_id & mask)
<can_id>~<can_mask> (matches when <received_can_id> &
mask != can_id & mask)
.TP
\fB\-b\fR BITRATE, \fB\-\-bitrate\fR BITRATE
Bitrate to use for the CAN bus.
.TP
\fB\-\-active\fR
Start the bus as active, this is applied the default.
.TP
\fB\-\-passive\fR
Start the bus as passive.
